global opens, reads, writes, totals


probe begin {
	printf("starting probe\n")
}


probe syscall.openat {
	opens[execname()] <<< 1
}


probe syscall.pread.return {
	count = retval
	if (pid() == target() && count >= 0) {
		reads[execname()] <<< count
		totals[execname()] <<< count
	}
}


probe syscall.pwrite.return {
	count = retval
	if (pid() == target() && count >=0) {
		writes[execname()] <<< count
		totals[execname()] <<< count
	}
}


probe end {
	printf("%16s %8s %8s %8s %8s %8s %8s %8s\n",
	"name", "open", "read", "MB tot", "B avg", "write", "MB tot", "B avg")
	# sort by total io
	foreach (name in totals @sum- limit 20) {
		printf("%16s %8d %8d %8d %8d %8d %8d %8d\n",
		name, 
		@count(opens[name]),
		@count(reads[name]),
		(@count(reads[name]) ? @sum(reads[name])>>20 : 0 ),
		(@count(reads[name]) ? @avg(reads[name]) : 0 ),
		@count(writes[name]),
		(@count(writes[name]) ? @sum(writes[name])>>20 : 0 ),
		(@count(writes[name]) ? @avg(writes[name]) : 0 ))
	}
}